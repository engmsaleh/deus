
/*
 * DeusSimulationPanel.java
 *
 * Created on 7-gen-2009, 12.41.49
 */

package it.unipr.ce.dsg.deus.automator;

import it.unipr.ce.dsg.deus.automator.gui.EngineParameter;
import it.unipr.ce.dsg.deus.automator.gui.GnuPlotFileElement;
import it.unipr.ce.dsg.deus.automator.gui.Node;
import it.unipr.ce.dsg.deus.automator.gui.NodeParameter;
import it.unipr.ce.dsg.deus.automator.gui.NodeResource;
import it.unipr.ce.dsg.deus.automator.gui.ProcessParameter;

import java.util.ArrayList;

/**
 *
 * @author marcopk
 */
@SuppressWarnings("serial")
public class DeusSimulationPanelCommandLine {

	public static ArrayList<ArrayList<Object>> simulations = new ArrayList<ArrayList<Object>>();
  
	private ArrayList<NodeParameter> nodeParameterList;
	private ArrayList<NodeResource> nodeResourceList;
	private ArrayList<ProcessParameter> processParameterList;
	private ArrayList<EngineParameter> engineParameterList;
	private ArrayList<GnuPlotFileElement> gnuPlotFileList;
    private ArrayList<Node> nodeList;
  
	
	/** Creates new form DeusSimulationPanel */
    public DeusSimulationPanelCommandLine() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	
		nodeParameterList = new ArrayList<NodeParameter>();
		nodeResourceList = new ArrayList<NodeResource>();
		processParameterList = new ArrayList<ProcessParameter>();
		engineParameterList = new ArrayList<EngineParameter>();
		gnuPlotFileList = new ArrayList<GnuPlotFileElement>();
			
	}

	public String createSimulationXML(String simulationTitle, int i) {
		
		String xmlString = "";
		
		//<simulation simulationNumberSeed="6" simulationName="speedSimulation">	
		xmlString = xmlString + "<simulation simulationNumberSeed=\"" + this.engineParameterList.size() +"\" simulationName=\""+ simulationTitle +"\">\n";
		
		//Creo l'arrayList per i nodi da scrivere sul file XML
		nodeList = new ArrayList<Node>();
		
		//Analizzo i NodeParameter Presenti
		for(int index = 0 ; index < this.nodeParameterList.size(); index++)
		{
			
			NodeParameter nodeParameter = this.nodeParameterList.get(index);
			Node appNode = new Node(nodeParameter.getNodeId());
			
			int position = this.nodeList.indexOf(appNode);
			
			//Se non presente in lista un nodo con lo stesso ID
			if(position == -1)
			{
				appNode.getNodeParameterList().add(nodeParameter);
				this.nodeList.add(appNode);
			}
			else
			{
				this.nodeList.get(position).getNodeParameterList().add(nodeParameter);
			}
		}
		
	
		//Analizzo i NodeResource Presenti
		for(int index = 0 ; index < this.nodeResourceList.size(); index++)
		{
				
			NodeResource nodeResource = this.nodeResourceList.get(index);
			Node appNode = new Node(nodeResource.getNodeId());
			
			int position = this.nodeList.indexOf(appNode);
			
			//Se non presente in lista un nodo con lo stesso ID
			if(position == -1)
			{
				appNode.getNodeResourceList().add(nodeResource);
				this.nodeList.add(appNode);
			}
			else
			{
				this.nodeList.get(position).getNodeResourceList().add(nodeResource);
			}
		}
		
		ArrayList<Object> app = new ArrayList<Object>();
		
		//Stampo i nodi ottenuti
		for(int index = 0 ; index < this.nodeList.size(); index++)
		{
			app.add(this.nodeList.get(index));
			xmlString = xmlString + this.nodeList.get(index).getXMLTag();
		}
		
		/**
		 * Scrittura dei Processi
		 * 
		 * 	<process id="serverPoisson1">
		 *  	<paramName name="meanArrival">
		 *			<initialValue>10</initialValue>
		 *			<finalValue>60</finalValue>
		 *			<stepValue>10</stepValue>
		 *  	</paramName>
		 *  </process>
		 */
		for(int index = 0 ; index < this.processParameterList.size(); index++)
		{
			app.add(this.processParameterList.get(index));
			ProcessParameter processParameter = this.processParameterList.get(index);
			xmlString = xmlString + "\n" +"<process id=\"" + processParameter.getProcessId() + "\">";
			xmlString = xmlString + "\n\t" + "<paramName name=\"" + processParameter.getParamName() + "\">";
			xmlString = xmlString + "\n\t\t" + "<initialValue>"+ processParameter.getInitialValue() + "</initialValue>";
			xmlString = xmlString + "\n\t\t" + "<finalValue>"+ processParameter.getFinalValue() + "</finalValue>";
			xmlString = xmlString + "\n\t\t" + "<stepValue>"+ processParameter.getStepValue() + "</stepValue>";
			xmlString = xmlString + "\n\t"   + "</paramName>" + "\t";
			xmlString = xmlString + "\n" + "</process>" + "\n\t";
		}
		
		/**
		 * Scrittura dei valori dell Engine
		 * 
		 * 	<engine startVT="20000" endVT="20000" stepVT="0">
		 *		<seed>
		 *			<seedValue>023456789</seedValue>
		 *			<seedValue>023456788</seedValue>
		 *			<seedValue>023456787</seedValue>
		 *			<seedValue>023456786</seedValue>
		 *			<seedValue>023456785</seedValue>
		 *		</seed>
		 *	</engine>
		 * 
		 */
		xmlString = xmlString + "\n" +"<engine>";
		xmlString = xmlString + "\n\t" +"<seed>";
		for(int index = 0 ; index < this.engineParameterList.size(); index++)
		{
			app.add(this.engineParameterList.get(index));
			EngineParameter engineParameter = this.engineParameterList.get(index);
			xmlString = xmlString + "\n\t\t" +"<seedValue>" + engineParameter.getSeedValue() + "</seedValue>";
		}
		xmlString = xmlString + "\n\t" +"</seed>";
		xmlString = xmlString + "\n" +"</engine>" + "\n\n";
		
		/*
		 * 		
		 * <!-- Elaborazione Risultati -->
		 * <resultVT outputLogFile="logger.dat"/>
		 * <resultXYFile fileName="prova" axisX="VT" axisY="Continuity Index" />
		 * </simulation>
		 */
	
		xmlString = xmlString + "<resultVT outputLogFile=\"./temp/logger\"/>" + "\n\n";
		
		//Inserimento File Grafici GnuPlot
		for(int index = 0 ; index < this.gnuPlotFileList.size(); index++)
		{
			GnuPlotFileElement gnuElem = this.gnuPlotFileList.get(index);
			xmlString = xmlString + "<resultXYFile fileName=\"" + gnuElem.getFileName() +"\" axisX=\""+gnuElem.getXLabel()+"\" axisY=\""+ gnuElem.getYLabel() +"\" />\n";
		}
		
//		xmlString = xmlString + "<resultXYFile fileName=\"prova\" axisX=\"VT\" axisY=\"Continuity Index\" />\n";
//		xmlString = xmlString + "<resultXYFile fileName=\"prova\" axisX=\"VT\" axisY=\"Duplicate %\" />\n";
		
		xmlString = xmlString + "\n" +"</simulation>\n";
		
		simulations.add(i, app);
		
		return xmlString;
	}

	/**
	 * Aggiunge un nuovo NodeParameter alla Tabella
	 * @param nodeParameter
	 */
	public void addNodeParameter(NodeParameter nodeParameter) {
		nodeParameterList.add(nodeParameter);
	}
	
	/**
	 * Aggiunge un nuovo NodeResource alla tabella
	 * 
	 * @param nodeResource
	 */
	public void addNodeResource(NodeResource nodeResource) {
    	nodeResourceList.add(nodeResource);
	}

    /**
     * Aggiunge un nuovo ProcessParameter alla tabella
     * 
     * @param processParameter
     */
	public void addProcessParameter(ProcessParameter processParameter) {
		processParameterList.add(processParameter);

	}
	
    /**
     * Aggiunge un nuovo EngineParameter alla tabella
     * 
     * @param engineParameter
     */
	public void addEngineParameter(EngineParameter engineParameter) {
    	engineParameterList.add(engineParameter);
	}

    /**
     * Aggiunge un GnuPlotFileElement alla tabella
     * 
     * @param gnuPlotFileElement
     */
    public void addGnuPlotFileElement(GnuPlotFileElement gnuPlotFileElement) {
    	gnuPlotFileList.add(gnuPlotFileElement);
	}
    
    /**
     * Rimuove tutti gli elementi presenti nel Panel e nelle table
     */
	public void clearAllData() {
		this.gnuPlotFileList.clear();
		//this.nodeList.clear();
		this.nodeParameterList.clear();
		this.processParameterList.clear();
		this.engineParameterList.clear();
	}
    
}
