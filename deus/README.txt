DEUS version 0.4.7
------------------

Unzip deus-x.y.z.zip. You will obtain a folder called deus-x.y.z


A) Simulation execution in Eclipse with Automator

Import existing project into workspace: folder deus-x.y.z already contains Eclipse config files.

RUN CONFIGURATIONS 
	1) MAIN
	Project: deus
	Main Class: it.unipr.ce.dsg.deus.automator.gui.DeusAutomatorFrame
	2) ARGUMENTS
	Program Arguments: first parameter passed is the path of the XML configuration file, while 
	the second is the name of the XML file that will be generated by the Automator  
	VM Arguments: -Djava.util.logging.config.file=logging.properties -Xms256M -Xmx1000M
	
For details about the Automator GUI, see:

http://code.google.com/p/deus/wiki/Tutorial


B) Simulation execution with command line and ant

You can create a build.xml to run a set of simulations from the command line,
without using Automator GUI - thus allowing you to run simulations on remote hosts.

Example target:

	<target name="NetworkCodingGF3to8_alone">
        <java classname="it.unipr.ce.dsg.deus.automator.DeusAutomatorCommandLine" failonerror="true" fork="yes">
            <jvmarg line="-Djava.util.logging.config.file=logging.properties -Xms256M -Xmx2000M"/>
            <arg line="examples/p2p.storage/NetworkCoding.xml logNC.xml examples/p2p.storage/xmlSimulazioniNC/nc/galoisFieldFrom3to8/automator.xml"/>
            <classpath refid="deus.classpath"/>
        </java>
    </target>

where automator.xml is:

<?xml version="1.0" encoding="UTF-8"?>

<deusAutomator xmlns="http://dsg.ce.unipr.it/software/deus/schema/deusAutomator" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dsg.ce.unipr.it/software/deus/schema/deusAutomator ../../schema/automator/deusAutomator.xsd">

<simulation simulationNumberSeed="10" simulationName="galois field from 3to8">

<node id="ClientNodePeer">
	<paramName name="pPower">
		<initialValue>3.0</initialValue>
		<finalValue>8.0</finalValue>
		<stepValue>5.0</stepValue>
	</paramName>
	
</node>

<engine>
	<seed>
		<seedValue>1234567890</seedValue>
		<seedValue>2345678901</seedValue>
		<seedValue>3456789012</seedValue>
		<seedValue>4567890123</seedValue>
		<seedValue>5678901234</seedValue>
		<seedValue>6789012345</seedValue>
		<seedValue>7890123456</seedValue>
		<seedValue>8901234567</seedValue>
		<seedValue>9012345678</seedValue>
		<seedValue>0123456789</seedValue>
	</seed>
</engine>

<resultVT outputLogFile="./temp/logger"/>

<resultXYFile fileName="resourcesAvailability" axisX="VT" axisY="ResourcesAvailability" />
<resultXYFile fileName="researchHits" axisX="VT" axisY="ResearchHitsPercentage" />
<resultXYFile fileName="storageNStats" axisX="VT" axisY="SuperNodesSpaceAmount" />
<resultXYFile fileName="storageStats" axisX="VT" axisY="StorageNodesSpaceAmount" />
<resultXYFile fileName="clientNodeAmount" axisX="VT" axisY="ClientNodesAmount" />
<resultXYFile fileName="superNodeAmount" axisX="VT" axisY="SuperNodesAmount" />
<resultXYFile fileName="storageNodeAmount" axisX="VT" axisY="StorageNodesAmount" />
<resultXYFile fileName="totalStats" axisX="VT" axisY="TotalSpaceAmount" />
<resultXYFile fileName="connectionsOverhead" axisX="VT" axisY="ConnectionsOverhead" />
<resultXYFile fileName="failureLinearDependence" axisX="VT" axisY="FailureLinearDependence" />
<resultXYFile fileName="publishedFragments" axisX="VT" axisY="PublishedFragments" />
<resultXYFile fileName="publishedResources" axisX="VT" axisY="PublishedResources" />
<resultXYFile fileName="maintenanceEvents" axisX="VT" axisY="MaintenanceEvents" />

</simulation>

You will run such a set of 20 simulations (10 seeds * 2 values of variable pPower) using the following command:

ant NetworkCodingGF16_alone

	
NOTES

It may be necessary to put the jaxb-api.jar in <java-home>/lib/endorsed 
Here <java-home> refers to the directory where the runtime software is 
installed (which is the top-level directory of the J2SE Runtime Environment 
or the jre directory in the JDK).

